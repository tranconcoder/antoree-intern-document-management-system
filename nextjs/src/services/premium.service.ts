import { axiosInstance } from "./index";

export interface PremiumPlan {
  id: string;
  name: string;
  price: string;
  period: string;
  originalPrice: string;
  features: string[];
  planType: "monthly" | "yearly" | "lifetime";
  amount: number;
  originalAmount: number;
  discountPercent: number;
}

export interface PremiumSubscription {
  id: string;
  planName: string;
  planType: "monthly" | "yearly" | "lifetime";
  amount: number;
  currency: string;
  startDate: string;
  endDate: string | null;
  remainingDays: number | null;
  features: string[];
  isCurrentlyActive: boolean;
}

export interface RevenueAnalytics {
  dateRange: {
    startDate: string;
    endDate: string;
  };
  overallStats: {
    totalRevenue: number;
    totalSubscriptions: number;
    averageAmount: number;
    planBreakdown: Array<{
      planType: string;
      amount: number;
    }>;
  };
  revenueByPlan: Array<{
    _id: string;
    totalRevenue: number;
    totalSubscriptions: number;
    averageAmount: number;
  }>;
  revenueTimeline: Array<{
    _id: {
      planType: string;
      month: number;
      year: number;
    };
    totalRevenue: number;
    totalSubscriptions: number;
    averageAmount: number;
  }>;
  recentSubscriptions: Array<{
    _id: string;
    planName: string;
    planType: string;
    amount: number;
    purchaseDate: string;
    userId: {
      _id: string;
      name: string;
      email: string;
    };
  }>;
}

class PremiumService {
  // Purchase a premium plan
  async purchasePlan(
    planId: string
  ): Promise<{ success: boolean; data?: any; message?: string }> {
    try {
      console.log('üöÄ Purchasing plan:', planId);
      console.log('üîó Using axiosInstance:', axiosInstance);
      
      const response = await axiosInstance.post("/premium/purchase", {
        planId,
      });
      
      console.log('‚úÖ API Response:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå API Error:', error);
      console.error('‚ùå Error response:', error.response?.data);
      
      return {
        success: false,
        message:
          error.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi mua g√≥i premium",
      };
    }
  }

  // Get current user's subscription
  async getCurrentSubscription(): Promise<{
    success: boolean;
    data?: { subscription: PremiumSubscription };
    message?: string;
  }> {
    try {
      const response = await axiosInstance.get("/premium/current");
      return response.data;
    } catch (error: any) {
      return {
        success: false,
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin g√≥i ƒëƒÉng k√Ω",
      };
    }
  }

  // Get subscription history
  async getSubscriptionHistory(
    page = 1,
    limit = 10
  ): Promise<{ success: boolean; data?: any; message?: string }> {
    try {
      const response = await axiosInstance.get(
        `/premium/history?page=${page}&limit=${limit}`
      );
      return response.data;
    } catch (error: any) {
      return {
        success: false,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ ƒëƒÉng k√Ω",
      };
    }
  }

  // Admin: Get revenue analytics
  async getRevenueAnalytics(
    startDate?: string,
    endDate?: string
  ): Promise<{ success: boolean; data?: RevenueAnalytics; message?: string }> {
    try {
      const params = new URLSearchParams();
      if (startDate) params.append("startDate", startDate);
      if (endDate) params.append("endDate", endDate);

      const response = await axiosInstance.get(
        `/premium/analytics?${params.toString()}`
      );
      return response.data;
    } catch (error: any) {
      return {
        success: false,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ doanh thu",
      };
    }
  }

  // Admin: Get all subscriptions
  async getAllSubscriptions(
    options: {
      page?: number;
      limit?: number;
      planType?: string;
      status?: string;
      startDate?: string;
      endDate?: string;
    } = {}
  ): Promise<{ success: boolean; data?: any; message?: string }> {
    try {
      const params = new URLSearchParams();
      Object.entries(options).forEach(([key, value]) => {
        if (value) params.append(key, value.toString());
      });

      const response = await axiosInstance.get(
        `/premium/all?${params.toString()}`
      );
      return response.data;
    } catch (error: any) {
      return {
        success: false,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒëƒÉng k√Ω",
      };
    }
  }

  // Get available premium plans (static data for now)
  getAvailablePlans(): PremiumPlan[] {
    return [
      {
        id: "monthly",
        name: "Premium 1 Th√°ng",
        price: "99,000",
        period: " VNƒê/th√°ng",
        originalPrice: "149,000 VNƒê",
        planType: "monthly",
        amount: 99000,
        originalAmount: 149000,
        discountPercent: 34,
        features: [
          "L∆∞u tr·ªØ ƒë√°m m√¢y kh√¥ng gi·ªõi h·∫°n",
          "T√¨m ki·∫øm th√¥ng minh AI",
          "H·ªó tr·ª£ ∆∞u ti√™n 24/7",
          "C·ªông t√°c nh√≥m kh√¥ng gi·ªõi h·∫°n",
          "Ph√¢n t√≠ch n√¢ng cao",
          "Truy c·∫≠p API ƒë·∫ßy ƒë·ªß",
          "Ch·ªØ k√Ω s·ªë",
          "Sao l∆∞u t·ª± ƒë·ªông",
          "B·∫£o m·∫≠t c·∫•p doanh nghi·ªáp",
          "T√≠ch h·ª£p t√πy ch·ªânh",
        ],
      },
      {
        id: "yearly",
        name: "Premium 1 NƒÉm",
        price: "799,000",
        period: " VNƒê/nƒÉm",
        originalPrice: "1,188,000 VNƒê",
        planType: "yearly",
        amount: 799000,
        originalAmount: 1188000,
        discountPercent: 33,
        features: [
          "L∆∞u tr·ªØ ƒë√°m m√¢y kh√¥ng gi·ªõi h·∫°n",
          "T√¨m ki·∫øm th√¥ng minh AI",
          "H·ªó tr·ª£ ∆∞u ti√™n 24/7",
          "C·ªông t√°c nh√≥m kh√¥ng gi·ªõi h·∫°n",
          "Ph√¢n t√≠ch n√¢ng cao",
          "Truy c·∫≠p API ƒë·∫ßy ƒë·ªß",
          "Ch·ªØ k√Ω s·ªë",
          "Sao l∆∞u t·ª± ƒë·ªông",
          "B·∫£o m·∫≠t c·∫•p doanh nghi·ªáp",
          "T√≠ch h·ª£p t√πy ch·ªânh",
        ],
      },
      {
        id: "lifetime",
        name: "Premium Tr·ªçn ƒê·ªùi",
        price: "2,999,000",
        period: " VNƒê (m·ªôt l·∫ßn)",
        originalPrice: "9,999,000 VNƒê",
        planType: "lifetime",
        amount: 2999000,
        originalAmount: 9999000,
        discountPercent: 70,
        features: [
          "L∆∞u tr·ªØ ƒë√°m m√¢y kh√¥ng gi·ªõi h·∫°n",
          "T√¨m ki·∫øm th√¥ng minh AI",
          "H·ªó tr·ª£ ∆∞u ti√™n 24/7",
          "C·ªông t√°c nh√≥m kh√¥ng gi·ªõi h·∫°n",
          "Ph√¢n t√≠ch n√¢ng cao",
          "Truy c·∫≠p API ƒë·∫ßy ƒë·ªß",
          "Ch·ªØ k√Ω s·ªë",
          "Sao l∆∞u t·ª± ƒë·ªông",
          "B·∫£o m·∫≠t c·∫•p doanh nghi·ªáp",
          "T√≠ch h·ª£p t√πy ch·ªânh",
          "C·∫≠p nh·∫≠t mi·ªÖn ph√≠ tr·ªçn ƒë·ªùi",
        ],
      },
    ];
  }

  // Format currency for display
  formatCurrency(amount: number): string {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
      minimumFractionDigits: 0,
    }).format(amount);
  }

  // Calculate savings percentage
  calculateSavings(originalAmount: number, currentAmount: number): number {
    return Math.round(
      ((originalAmount - currentAmount) / originalAmount) * 100
    );
  }
}

export const premiumService = new PremiumService();
export default premiumService;
